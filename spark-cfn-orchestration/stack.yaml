AWSTemplateFormatVersion: '2010-09-09'
Description: 'This template describe set of Custom Resources that enables Apache Spark support for CloudFormation'
Parameters:
  Environment:
    Type: 'String'
    Description: 'Environment name'
  Name:
    Type: 'String'
    Description: 'Service name that will be prefixed to resource names'
  Bucket:
    Type: 'String'
    Description: 'S3 bucket name where located source codes'
  SourceCode:
    Type: 'String'
    Description: 'S3 key where located source codes'
  LivyHost:
    Type: 'String'
    Description: 'Internal DNS name for Amazon EMR with installed Apache Livy'
  LivyPort:
    Type: 'Number'
    Description: 'Specify port of Apache Livy server'
    Default: '8998'
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup::Id'
    Description: 'Security Group Id which has access to Apache Livy on Amazon EMR'
  SubnetIds:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: 'List subnet ids which has access to Amazon EMR'
Resources:
  Lambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref Bucket
        S3Key: !Ref SourceCode
      Description: 'This lambda Submit/Kill Apache Spark application on Amazon EMR via Apache Livy'
      Environment:
        Variables:
          LIVY_HOST: !Ref LivyHost
          LIVY_PORT: !Ref LivyPort
      FunctionName: !Sub '${Name}-spark-job-submitter'
      Handler: 'com.github.vitalibo.spark.cfn.SparkResourceProvisionHandler'
      MemorySize: 512
      Role:
        Fn::GetAtt:
        - Role
        - Arn
      Runtime: 'java8'
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
        - !Ref SecurityGroup
        SubnetIds: !Ref SubnetIds
      Tags:
      - Key: 'Environment'
        Value: !Ref Environment
      - Key: 'Product'
        Value: !Ref Name
  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Policies:
      - PolicyName: 'Runtime'
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: !GetAtt
            - LogGroup
            - Arn
          - Effect: Allow
            Action:
            - 'ec2:CreateNetworkInterface'
            - 'ec2:DescribeNetworkInterfaces'
            - 'ec2:DeleteNetworkInterface'
            Resource: '*'
      RoleName: !Sub '${Name}-spark-job-submitter'
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${Name}-spark-job-submitter'
      RetentionInDays: 3
  Permission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt
      - Lambda
      - Arn
      Principal: cloudformation.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*'
Outputs:
  LambdaArn:
    Value: !GetAtt
    - Lambda
    - Arn
    Export:
      Name: !Sub '${Name}-spark-job-submitter'